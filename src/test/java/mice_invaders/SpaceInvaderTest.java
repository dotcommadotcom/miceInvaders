package mice_invaders;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class SpaceInvaderTest {

  MiceInvader spaceInvader;

  @BeforeEach
  public void setUp() {
    spaceInvader = new MiceInvader(15, 10);
  }

  @Test
  public void canaryTest() {
    assertTrue(true);
  }

  @Test
  public void createArena() {
    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            """, spaceInvader.toString());
  }

  @Test
  public void placeCatInArena() throws RuntimeException {
    spaceInvader.positionCat(new Dimension(1, 1), new Position(7, 0));

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            .......V.......
            """, spaceInvader.toString());
  }

  @Test
  public void placeCatOutsideArenaThrowException() {
    Exception exception = assertThrows(RuntimeException.class, () -> spaceInvader.positionCat(new Dimension(1, 1), new Position(15, 0)));

    assertTrue(exception.getMessage().contains("Cat placed out of bounds."));
  }

  @Test
  public void checkIsOutsideArenaReturnsTrue() {
    assertAll(
            () -> assertTrue(spaceInvader.isOutsideArena(1, 1, -1, 0)),
            () -> assertTrue(spaceInvader.isOutsideArena(1, 1, 15, 0)),
            () -> assertTrue(spaceInvader.isOutsideArena(1, 1, 0, -1)),
            () -> assertTrue(spaceInvader.isOutsideArena(1, 1, 0, 10)),
            () -> assertTrue(spaceInvader.isOutsideArena(1, 2, 0, 9)),
            () -> assertTrue(spaceInvader.isOutsideArena(2, 1, 14, 0))
    );
  }

  @Test
  public void checkIsOutsideArenaReturnsFalse() {
    assertAll(
            () -> assertFalse(spaceInvader.isOutsideArena(1, 1, 0, 0)),
            () -> assertFalse(spaceInvader.isOutsideArena(1, 1, 14, 0)),
            () -> assertFalse(spaceInvader.isOutsideArena(1, 1, 0, 9)),
            () -> assertFalse(spaceInvader.isOutsideArena(2, 2, 13, 8))
    );
  }

  @Test
  public void moveCatOneStepRight() throws RuntimeException {
    spaceInvader.positionCat(new Dimension(3, 2), new Position(7, 0));

    spaceInvader.moveCatRight();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ........VVV....
            ........VVV....
            """, spaceInvader.toString());
  }

  @Test
  public void moveCatRightButStaysStill() throws RuntimeException {
    spaceInvader.positionCat(new Dimension(1, 1), new Position(14, 0));

    spaceInvader.moveCatRight();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ..............V
            """, spaceInvader.toString());
  }

  @Test
  public void moveCatWithDimensionsRightButStaysStill() throws RuntimeException {
    spaceInvader.positionCat(new Dimension(3, 2), new Position(12, 0));

    spaceInvader.moveCatRight();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ............VVV
            ............VVV
            """, spaceInvader.toString());
  }

  @Test
  public void moveCatOneStepLeft() throws RuntimeException {
    spaceInvader.positionCat(new Dimension(3, 2), new Position(7, 0));

    spaceInvader.moveCatLeft();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ......VVV......
            ......VVV......
            """, spaceInvader.toString());
  }

  @Test
  public void moveCatLeftButStaysStill() throws RuntimeException {
    spaceInvader.positionCat(new Dimension(3, 2), new Position(0, 0));

    spaceInvader.moveCatLeft();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            VVV............
            VVV............
            """, spaceInvader.toString());
  }

  @Test
  public void placeCatWithDimensions() throws RuntimeException {
    spaceInvader.positionCat(new Dimension(3, 2), new Position(7, 0));

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            .......VVV.....
            .......VVV.....
            """, spaceInvader.toString());
  }

  @Test
  public void placeCatWithDimensionsOutsideArena() throws RuntimeException {
    Exception exception = assertThrows(RuntimeException.class, () -> spaceInvader.positionCat(new Dimension(3, 2), new Position(13, 9)));

    assertTrue(exception.getMessage().contains("Cat placed out of bounds."));
  }

}
