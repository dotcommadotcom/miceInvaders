package mice_invaders;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class miceInvaderTest {

  MiceInvader miceInvader;

  @BeforeEach
  public void setUp() {
    miceInvader = new MiceInvader(15, 10);
  }

  @Test
  public void canaryTest() {
    assertTrue(true);
  }

  @Test
  public void createArenaAndConvertToString() {
    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            """, miceInvader.toString());
  }

  @Test
  public void placeCatInArena() {
    miceInvader.positionCat(new Dimension(), new Position(7, 0), 1);

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            .......V.......
            """, miceInvader.toString());
  }

  @Test
  public void placeCatOutsideArenaThrowException() {
    Exception exception = assertThrows(RuntimeException.class, () -> miceInvader.positionCat(new Dimension(), new Position(15, 0), 1));

    assertTrue(exception.getMessage().contains("Cat placed out of bounds."));
  }

  @Test
  public void checkIsOutsideArenaReturnsTrueForDefaultDim() {
    assertAll(
      () -> assertTrue(miceInvader.isOutsideArena(1, 1, -1, 0)),
      () -> assertTrue(miceInvader.isOutsideArena(1, 1, 15, 0)),
      () -> assertTrue(miceInvader.isOutsideArena(1, 1, 0, -1)),
      () -> assertTrue(miceInvader.isOutsideArena(1, 1, 0, 10))
    );
  }

  @Test
  public void checkIsOutsideArenaReturnsFalseForDefaultDim() {
    assertAll(
      () -> assertFalse(miceInvader.isOutsideArena(1, 1, 0, 0)),
      () -> assertFalse(miceInvader.isOutsideArena(1, 1, 14, 0)),
      () -> assertFalse(miceInvader.isOutsideArena(1, 1, 0, 9))
    );
  }

  @Test
  public void placeCatWithDimInArena() {
    miceInvader.positionCat(new Dimension(3,2), new Position(7, 0), 1);

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            .......VVV.....
            .......VVV.....
            """, miceInvader.toString());
  }

  @Test
  public void placeCatWithDimensionsOutsideArena() {
    Exception exception = assertThrows(RuntimeException.class, () -> miceInvader.positionCat(new Dimension(3, 2), new Position(13, 8), 1));

    assertTrue(exception.getMessage().contains("Cat placed out of bounds."));
  }

  @Test
  public void checkIsOutsideArenaReturnsTrueForNonDefaultDim() {
    assertAll(
      () -> assertTrue(miceInvader.isOutsideArena(1, 2, 0, 9)),
      () -> assertTrue(miceInvader.isOutsideArena(2, 1, 14, 0))
    );
  }

  @Test
  public void checkIsOutsideArenaReturnsFalseForNonDefaultDim() {
    assertAll(
      () -> assertFalse(miceInvader.isOutsideArena(1, 2, 0, 8)),
      () -> assertFalse(miceInvader.isOutsideArena(2, 1, 13, 0))
    );
  }

  @Test
  public void moveCatOneStepRight() {
    miceInvader.positionCat(new Dimension(), new Position(13, 0), 1);

    miceInvader.moveCatRight();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ..............V
            """, miceInvader.toString());
  }

  @Test
  public void moveCatRightButStayStill() {
    miceInvader.positionCat(new Dimension(), new Position(14, 0), 1);

    miceInvader.moveCatRight();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ..............V
            """, miceInvader.toString());
  }

  @Test
  public void moveCatWithDimButStayStill() {
    miceInvader.positionCat(new Dimension(3, 2), new Position(12, 0), 1);

    miceInvader.moveCatRight();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ............VVV
            ............VVV
            """, miceInvader.toString());
  }

  @Test
  public void moveCatWithSpeed() {
    miceInvader.positionCat(new Dimension(3, 2), new Position(9, 0), 3);

    miceInvader.moveCatRight();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ............VVV
            ............VVV
            """, miceInvader.toString());
  }

  @Test
  public void moveCatWithSpeedButStayStill() {
    miceInvader.positionCat(new Dimension(3, 2), new Position(12, 0), 3);

    miceInvader.moveCatRight();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ............VVV
            ............VVV
            """, miceInvader.toString());
  }

  @Test
  public void moveCatPartialRightWithSpeed() {
    miceInvader.positionCat(new Dimension(3, 2), new Position(10, 0), 3);

    miceInvader.moveCatRight();

    assertEquals("""
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ............VVV
            ............VVV
            """, miceInvader.toString());
  }
}
